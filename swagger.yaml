openapi: "3.0.0"
info:
  title: "Flask API"
  version: "1.0.0"
servers:
  - url: http://192.168.3.27:3000
paths:
  /api/v1/led/on:
    get:
      summary: "Turn LED on"
      responses:
        '200':
          description: "Successful Response"
          content:
            application/json: {}
  /api/v1/led/off:
    get:
      summary: "Turn LED off"
      responses:
        '200':
          description: "Successful Response"
          content:
            application/json: {}
  /api/v1/settings/homing:
    get:
      summary: "Get Homing All Axes"
      responses:
        '200':
          description: "Successful Response"
          content:
            application/json: {}
  /api/v1/camera/autofocus:
    get:
      summary: "Camera Autofocus"
      parameters:
        - name: "step_size"
          in: "query"
          schema:
            type: "number"
            default: 0.05
        - name: "n_step"
          in: "query"
          schema:
            type: "integer"
            default: 10
        - name: "threshold"
          in: "query"
          schema:
            type: "number"
            default: 0.5
      responses:
        '200':
          description: "Successful Response"
          content:
            application/json: {}
  /api/v1/camera/capture:
    get:
      summary: "Camera Capture"
      responses:
        '200':
          description: "Successful Response"
          content:
            application/json: {}
  /api/v1/camera/fetch/{id_}:
    get:
      summary: "Fetch Camera Image by ID"
      parameters:
        - name: "id_"
          in: "path"
          required: true
          schema:
            type: "string"
      responses:
        '200':
          description: "Successful Response"
          content:
            image/png: {}
        '400':
          description: "Bad Request"
          content:
            application/json: {}
  /api/v1/stage/current_position:
    get:
      summary: "Get Current Position"
      responses:
        '200':
          description: "Successful Response"
          content:
            application/json: {}
  /api/v1/stage/move_to/{coord}:
    get:
      summary: "Move to Coordinate"
      parameters:
        - name: "coord"
          in: "path"
          required: true
          schema:
            type: "string"
        - name: "x"
          in: "query"
          required: true
          schema:
            type: "number"
        - name: "y"
          in: "query"
          required: true
          schema:
            type: "number"
        - name: "z"
          in: "query"
          required: true
          schema:
            type: "number"
      responses:
        '200':
          description: "Successful Response"
          content:
            application/json: {}
        '400':
          description: "Bad Request"
          content:
            application/json: {}
  /api/v1/points/read/{filename}:
    get:
      summary: "Read Points by Filename"
      parameters:
        - name: "filename"
          in: "path"
          required: true
          schema:
            type: "string"
      responses:
        '200':
          description: "Successful Response"
          content:
            application/json: {}
  /api/v1/points/write/{filename}:
    get:
      summary: "Write Points by Filename"
      parameters:
        - name: "filename"
          in: "path"
          required: true
          schema:
            type: "string"
      responses:
        '200':
          description: "Successful Response"
          content:
            application/json: {}
  /api/v1/healthcheck:
    get:
      summary: "API Health Check"
      responses:
        '200':
          description: "API Server is Healthy"
          content:
            application/json: {}
  /api/v1/analysis/:
    get:
      summary: "Confluency Analysis"
      parameters:
        - name: "model_name"
          in: "query"
          schema:
            type: "string"
            default: "confluency_demo"
        - name: "image_id"
          in: "query"
          required: true
          schema:
            type: "string"
      responses:
        '200':
          description: "Confluency analysis succeeded."
          content:
            application/json:
              example:
                message: "confluency analysis succeeded."
                data:
                  value: 0.8
                  masked_image: []
        '400':
          description: "Bad Request"
          content:
            application/json:
              example:
                message: "No such model in shared_data/models."
                
  /api/v1/cell_analysis/:
    get:
      summary: "Cell Analysis"
      parameters:
        - name: "cell_type"
          in: "query"
          schema:
            type: "string"
            default: "test"
        - name: "analysis_type"
          in: "query"
          required: true
          schema:
            type: "string"
        - name: "image_id"
          in: "query"
          required: true
          schema:
            type: "string"
      responses:
        '200':
          description: "Analysis succeeded."
          content:
            application/json:
              example:
                message: "cell count analysis succeeded."
                data:
                  live_cell_count: 100
                  dead_cell_count: 20
                  overlay_image: []
        '400':
          description: "Bad Request"
          content:
            application/json:
              example:
                message: "No analysis_type is specified."